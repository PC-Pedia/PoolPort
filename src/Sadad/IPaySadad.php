<?php
/**
 * User: ReZa ZaRe <Rz.ZaRe@Gmail.com>
 * Date: 5/1/15
 * Time: 3:17 PM
 */

namespace IPay\Sadad;


use IPay\Config;
use IPay\IPayAbstract;
use SoapClient;

/**
 * class for sadad gateway (bank melli)
 *
 * @package IPay\Sadad
 */
class IPaySadad extends IPayAbstract
{
    /**
     * private transaction key
     *
     * @var string
     */
    protected $transactionKey;

    /**
     * شماره ترمینال
     *
     * @var string
     */
    protected $terminalId;

    /**
     * کد شناسایی فروشنده
     *
     * @var string
     */
    protected $merchant;

    /**
     * url of sadad gateway web service
     *
     * @var string
     */
    protected $urlWebService = 'https://sadad.shaparak.ir/services/MerchantUtility.asmx?wsdl';

    /**
     * list errors
     *
     * @var array
     */
    protected $errors = [];

    /**
     * get reference id
     *
     * @var string
     */
    private $refId;

    /**
     * @var bool
     */
    private $requestPass = false;

    /**
     * form generated by sadad gateway
     *
     * @var string
     */
    private $form = '';

    /**
     * code of response sadad gateway
     *
     * @var int
     */
    private $payRequestResCode;

    private $traceNumber = '';
    /**
     * @inheritdoc
     */
    public function __construct($configFile=null)
    {
        $this->config = new Config($configFile);

        $this->merchant = $this->config->get('sadad.merchant');
        $this->terminalId = $this->config->get('sadad.terminalId');
        $this->transactionKey = $this->config->get('sadad.transactionKey');

        $this->setDB();
        $this->setMode();
        parent::__construct();
    }

    /**
     * send request to sadad gateway
     *
     * @param int $amount
     * @param null $callBack
     * @return bool
     * @throws SadadException
     * @throws \Exception
     * @throws \SoapFault
     */
    public function sendPayRequest($amount,$callBack = null)
    {
        if (is_null($callBack))
            $callBack = $this->config->get('sadad.callBackUrl');

        $orderId = $this->newLog('','','',$amount);

        $query = parse_url($callBack, PHP_URL_QUERY);
        # append order_id to callback url (necessary for verify)
        if ($query) {
            $callBack .= '&order_id='.$orderId;
        } else {
            $callBack .= '?order_id='.$orderId;
        }

        $this->requestPass = false;
        $this->form = '';
        try{
            $soap = new SoapClient($this->urlWebService);
            $amount = intval($amount);

            $response = $soap->PaymentUtility($this->merchant, $amount, $orderId, $this->transactionKey, $this->terminalId, $callBack);

            if(!isset($response['RequestKey']) || !isset($response['PaymentUtilityResult'])) {
                $this->addError(SadadResult::INVALID_RESPONSE_CODE, SadadResult::INVALID_RESPONSE_MESSAGE);
                return false;
            }

            $this->form = $response['PaymentUtilityResult'];

            $this->refId = $response['RequestKey'];

            $this->editLog($orderId, $this->refId, $orderId, '', 'Start connection to bank.');
            $this->requestPass = true;
            return true;
        } catch (\SoapFault $e) {
            if ($this->debug)
                throw $e;

            $this->errors[] = 'خطایی در اتصال به درگاه بانک رخ داده است.';
            return false;
        }
    }

    /**
     * verify payment
     *
     * @return bool
     * @throws SadadException
     */
    public function callback()
    {
        $orderId = intval(@$_GET['order_id']);
        if($orderId<=0)
            throw new SadadException('تراکنشی برای این شناسه یافت نشد.');

        $payment = $this->getLog($orderId);
        if(!isset($payment['id']))
            throw new SadadException('تراکنشی برای این شناسه یافت نشد.');

        $soap = new SoapClient($this->urlWebService);
        $result = $soap->CheckRequestStatusResult(intval($orderId),$this->merchant,$this->terminalId,$this->transactionKey,$payment['ref_id'],intval($payment['additional_data']));

        if(empty($result) || !isset($result->AppStatusCode))
            throw new SadadException('در دریافت اطلاعات از بانک خطایی رخ داده است.');

        $status_result = strval($result->AppStatusCode);
        $AppStatus = strtolower($result->AppStatusDescription);

        if ($this->checkPayment($orderId,$payment['ref_id'],$result->TraceNo))
            throw new SadadException('این تراکنش قبلا تایید شده است.');


        $this->checkAgain($orderId,$status_result,$AppStatus);

        if($status_result == 0 && $AppStatus === 'commit') {       # تراکنش با موفقیت ثبت شده.
            $this->newLog($payment['ref_id'],$payment['sale_order_id'],$result->TraceNo,$payment['additional_data'],'User payment done.');
            $this->traceNumber = $result->TraceNo;
            return true;
        } else {
            $error = $this->addError($status_result,$AppStatus);
            $this->newLog($payment['ref_id'],$payment['sale_order_id'],'',$payment['additional_data'],"failed to payment \nerror Code:{$status_result}\nerror Message: {$error['fa']}");
            return false;
        }
    }

    /**
     *
     * @return string
     */
    public function getRefId()
    {
        return $this->refId;
    }

    /**
     * return trace number
     *
     * @return int|string
     */
    public function getTraceNumber()
    {
        if ($this->traceNumber)
            return $this->traceNumber;

        return 0;
    }

    /**
     * redirect customer to sadad gateway
     */
    public function redirectToBank()
    {
        if ($this->requestPass) {
            $form = $this->form;
            require_once __DIR__.'/submitForm.php';
            return;
        }
    }

    /**
     * Check request passes
     *
     * @return bool
     */
    public function passPayRequest()
    {
        return !!$this->requestPass;
    }


    /**
     * Get ResCode of payRequest method
     *
     * @return int
     */
    public function getPayRequestResCode()
    {
        return $this->payRequestResCode;
    }

    /**
     * register error to error list
     *
     * @param int $code
     * @param string $message
     * @return array|null
     * @throws SadadException
     */
    private function addError($code, $message)
    {
        $result = SadadResult::codeResponse($code,$message);

        if (!$result)
            $result = [
                'code'=>SadadResult::UNKNOWN_CODE,
                'message'=>SadadResult::UNKNOWN_MESSAGE,
                'fa'=>'خطای ناشناخته',
                'en'=>'Unknown Error',
                'retry'=>false
            ];

        if ($result['retry']) {
            # todo : set job for retry
        }

        $this->payRequestResCode = $result['code'];
        $this->errors[] = $result[$this->debugMessagesLanguage];

        if ($this->debug)
            throw new SadadException($result[$this->debugMessagesLanguage],$result['code']);

        return $result;
    }

    /**
     * return errors
     *
     * @return array
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Insert new log to table
     *
     * @param string $refId
     * @param string $saleOrderId
     * @param string $saleReferencesId
     * @param string $AdditionalData
     * @param string $message
     * @return int last inserted id
     */
    public function newLog($refId = '', $saleOrderId = '', $saleReferencesId = '', $AdditionalData = '', $message = '')
    {
        $sql = 'INSERT INTO mellat_orders_log (`ref_id`, `sale_order_id`, `sale_refrences_id`, `additional_data`, `message`, `timestamp`)
                VALUES (:ref_id, :sale_order_id, :sale_references_id, :additional_data, :message, NOW())';

        $stmt = $this->dbh->prepare($sql);
        $stmt->bindParam(':ref_id', $refId);
        $stmt->bindParam(':sale_order_id', $saleOrderId);
        $stmt->bindParam(':sale_references_id', $saleReferencesId);
        $stmt->bindParam(':additional_data', $AdditionalData,\PDO::PARAM_INT);
        $stmt->bindParam(':message', $message);
        $stmt->execute();
        return $this->dbh->lastInsertId();
    }

    /**
     * Update log in table
     *
     * @param int $id
     * @param string $refId
     * @param string $saleOrderId
     * @param string $saleReferencesId
     * @param string $message
     * @return bool
     */
    public function editLog($id, $refId = '', $saleOrderId = '', $saleReferencesId = '', $message = '')
    {
        $stmt = $this->dbh->prepare("UPDATE mellat_orders_log
                                     SET ref_id = :ref_id, sale_order_id = :sale_order_id, sale_refrences_id = :saleReferencesId, message = :message
                                     WHERE id = :id");
        $stmt->bindParam(':ref_id', $refId);
        $stmt->bindParam(':sale_order_id', $saleOrderId);
        $stmt->bindParam(':saleReferencesId', $saleReferencesId);
        $stmt->bindParam(':message', $message);
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }

    /**
     * get log by sale_order_id field
     *
     * @param int $id
     * @return null|array
     */
    public function getLog($id)
    {
        $sql = 'SELECT *
                FROM `mellat_orders_log`
                WHERE `sale_order_id` = '.intval($id).'
                LIMIT 1';

        $stmt = $this->dbh->query($sql);
        return $stmt->fetch(\PDO::FETCH_ASSOC);
    }

    /**
     * Whether the transaction has already been approved
     *
     * @param $orderId
     * @param $refId
     * @param $saleRefId
     * @return mixed
     */
    public function checkPayment($orderId,$refId,$saleRefId)
    {
        $sql = 'SELECT *
                FROM `mellat_orders_log`
                WHERE `ref_id` = "'.$refId.'" AND sale_order_id = '.intval($orderId).' AND sale_refrences_id = "'.$saleRefId.'"
                LIMIT 1';

        $stmt = $this->dbh->prepare($sql);
        $stmt->execute();

        return $stmt->fetch(\PDO::FETCH_ASSOC);
    }

    private function checkAgain($orderId, $status_result, $AppStatus)
    {
        #todo: Is it necessary to transaction a re-review
    }
}